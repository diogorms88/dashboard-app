'use client'

import { useState, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Separator } from '@/components/ui/separator'
import { Plus, Trash2, ArrowLeft, Save } from 'lucide-react'
import { useAuth } from '@/hooks/use-auth'
import { CreateProductionRecordSchema, ParadaSchema, ProducaoItemSchema } from '@/lib/schemas'
import { validateData, formatValidationErrors } from '@/lib/validation'
import { toast } from 'sonner'

interface ProductionFormProps {
  onClose: () => void
  targetDate?: string
}

interface Downtime {
  id: string
  reason: string
  duration: string
  description: string
}

interface Production {
  id: string
  model: string
  color: string
  quantity: string
  isRepaint: boolean
}

const timeSlots = [
  '00:00 - 01:00', '01:00 - 02:00', '02:00 - 03:00', '03:00 - 04:00', '04:00 - 05:00', '05:00 - 06:00',
  '06:00 - 07:00', '07:00 - 08:00', '08:00 - 09:00', '09:00 - 10:00', '10:00 - 11:00', '11:00 - 12:00',
  '12:00 - 13:00', '13:00 - 14:00', '14:00 - 15:00', '15:00 - 16:00', '16:00 - 17:00', '17:00 - 18:00',
  '18:00 - 19:00', '19:00 - 20:00', '20:00 - 21:00', '21:00 - 22:00', '22:00 - 23:00', '23:00 - 23:59'
]

const getShiftFromTime = (timeSlot: string): string => {
  const hour = parseInt(timeSlot.split(':')[0])
  if (hour >= 0 && hour < 6) return '3¬∫ Turno'
  if (hour >= 6 && hour < 15) return '1¬∫ Turno'
  return '2¬∫ Turno'
}

// Fun√ß√£o para mapear motivos de parada para crit√©rios
const getAreaFromReason = (reason: string): string => {
  // Encontrar a √°rea baseada no motivo de parada
  for (const [area, reasons] of Object.entries(downtimeReasonsByArea)) {
    if (reasons.includes(reason)) {
      // Remover emoji e converter para formato do crit√©rio
      const cleanArea = area.replace(/^[^\w\s]+\s*/, '').toUpperCase()
      
      // Mapeamento espec√≠fico para os crit√©rios esperados
      switch (cleanArea) {
        case 'ENGENHARIA':
          return 'ENGENHARIA'
        case 'GEST√ÉO':
          return 'GEST√ÉO'
        case 'LOG√çSTICA':
          return 'LOG√çSTICA'
        case 'MANUTEN√á√ÉO':
          return 'MANUTEN√á√ÉO'
        case 'MILCLEAN':
          return 'MILCLEAN'
        case 'PRODU√á√ÉO':
          return 'PRODU√á√ÉO'
        case 'QUALIDADE':
          return 'QUALIDADE'
        case 'SETUP':
          return 'SETUP'
        case 'PINTURA':
          return 'PINTURA'
        case 'SEGURAN√áA':
          return 'SEGURAN√áA'
        default:
          return 'OUTROS'
      }
    }
  }
  
  // Se n√£o encontrar, retornar OUTROS
  return 'OUTROS'
}

const downtimeReasonsByArea = {
  'üß™ Engenharia': [
    'TESTE DE ENGENHARIA',
    'LIMITE DE EIXO'
  ],
  'üë• Gest√£o': [
    'FALTA DE FERRAMENTAS',
    'FALTA DE OPERADOR NA CARGA',
    'FALTA DE PE√áAS DA PREPARA√á√ÉO',
    'OPERADOR BUSCANDO PE√áA NO ALMOXARIFADO',
    'OPERADOR NA ENFERMARIA',
    'ORGANIZA√á√ÉO GERAL NO SETOR',
    'PARADA NA CABINE',
    'PARADA NA CARGA - ABASTECENDO A LINHA',
    'PARADA NA DESCARGA - DESCARREGANDO PE√áAS',
    'PARADA EXTERNA',
    'REFEI√á√ÉO',
    'REGULAGEM DE M√ÅQUINA',
    'RETRABALHO / LIMPEZA DE PE√áAS',
    'REUNI√ÉO COM A DIRETORIA',
    'REUNI√ÉO',
    'TREINAMENTO',
    'TROCA DE TURNO'
  ],
  'üì¶ Log√≠stica': [
    'AGUARDANDO A PROGRAMA√á√ÉO',
    'FALHA RFID',
    'FALTA DE ABASTECIMENTO DE RACK',
    'FALTA DE EMBALAGEM DA LOG√çSTICA',
    'FALTA DE EMPILHADOR DA LOG√çSTICA ABASTECENDO PE√áAS',
    'FALTA DE MAT√âRIA PRIMA (TINTA / VERNIZ)',
    'FALTA DE PE√áAS DO ALMOXARIFADO (REQUISITADO)',
    'FALTA DE PE√áAS INJETADAS',
    'PARADA PROGRAMADA'
  ],
  'üîß Manuten√ß√£o': [
    'AGUARDANDO A MANUTEN√á√ÉO',
    'CABINE DESBALANCEADA',
    'CORRENTE QUEBRADA',
    'FALHA NO ELEVADOR',
    'FALTA AR COMPRIMIDO',
    'FALTA DE ENERGIA',
    'MANGUEIRA ENTUPIDA',
    'MANGUEIRA VAZANDO',
    'MANUTEN√á√ÉO CORRETIVA',
    'SKID TRAVADO',
    'MANUTEN√á√ÉO EL√âTRICA',
    'MANUTEN√á√ÉO MEC√ÇNICA',
    'MANUTEN√á√ÉO PREDIAL',
    'MANUTEN√á√ÉO PREVENTIVA',
    'MANUTEN√á√ÉO SERRALHERIA',
    'PROBLEMA NO ROB√î CAB. FLAMAGEM',
    'PROBLEMA NO ROB√î CAB. PRIMER',
    'PROBLEMA NO ROB√î CAB. BASE',
    'PROBLEMA NO ROB√î CAB. VERNIZ',
    'PROBLEMA NO MA√áARICO',
    'PROBLEMA NO MOTOR / CORREIA',
    'PROBLEMA NO POWER WASH'
  ],
  'üßΩ Milclean': [
    'AGUARDANDO OPERADOR PARA LIMPEZA'
  ],
  'üè≠ Produ√ß√£o': [
    'FALTA DE OPERADOR',
    'FIM DE EXPEDIENTE',
    'LIMPEZA DE M√ÅQUINA',
    'PAUSA',
    'TROCA DE PE√áAS',
    'TROCA DE SETUP'
  ],
  '‚úÖ Qualidade': [
    'ESPERANDO LIBERA√á√ÉO DA QUALIDADE'
  ],
  '‚öôÔ∏è Setup': [
    'SETUP DE COR',
    'TROCA DE MODELO'
  ],
  'üé® Pintura': [
    'LIMPEZA DA CABINE',
    'GAP PARA LIMPEZA NA CABINE',
    'LIMPEZA CONJUNTO ECOBELL',
    'GAP NA FLAMAGEM'
  ],
  'üõ°Ô∏è Seguran√ßa': [
    'ACIDENTE / INCIDENTE',
    'INSPE√á√ÉO DE SEGURAN√áA'
  ]
}

const models = [
  'Polo PA DT',
  'Polo PA TR',
  'Polo Track DT',
  'Polo Track TR',
  'Virtus DT',
  'Virtus TR',
  'Tera DT',
  'Tera Polaina LD',
  'Tera Polaina LE',
  'Grade Virtus',
  'Grade Virtus GTS',
  'Aerof√≥lio',
  'Spoiler',
  'Tera Friso DT',
  'Tera Friso TR'
]

const colors = [
  'Primer P&A',
  'Branco',
  'Prata',
  'Preto',
  'Platinum',
  'Vermelho',
  'Azul Biscay',
  'IceBird',
  'ClearWater',
  'HyperNova'
]

export function ProductionForm({ onClose, targetDate }: ProductionFormProps) {
  const { token } = useAuth()
  const [selectedTime, setSelectedTime] = useState('')
  const [skidsProduced, setSkidsProduced] = useState('')
  const [emptySkids, setEmptySkids] = useState('')
  const [downtimes, setDowntimes] = useState<Downtime[]>([{
    id: '1',
    reason: '',
    duration: '',
    description: ''
  }])
  const [productions, setProductions] = useState<Production[]>([{
    id: '1',
    model: '',
    color: '',
    quantity: '',
    isRepaint: false
  }])

  const addDowntime = useCallback(() => {
    const newDowntime: Downtime = {
      id: Date.now().toString(),
      reason: '',
      duration: '',
      description: ''
    }
    setDowntimes(prev => [...prev, newDowntime])
  }, [])

  const removeDowntime = useCallback((id: string) => {
    setDowntimes(prev => prev.length > 1 ? prev.filter(d => d.id !== id) : prev)
  }, [])

  const updateDowntime = useCallback((id: string, field: keyof Downtime, value: string) => {
    setDowntimes(prev => prev.map(d => 
      d.id === id ? { ...d, [field]: value } : d
    ))
  }, [])

  const addProduction = useCallback(() => {
    const newProduction: Production = {
      id: Date.now().toString(),
      model: '',
      color: '',
      quantity: '',
      isRepaint: false
    }
    setProductions(prev => [...prev, newProduction])
  }, [])

  const removeProduction = useCallback((id: string) => {
    setProductions(prev => prev.length > 1 ? prev.filter(p => p.id !== id) : prev)
  }, [])

  const updateProduction = useCallback((id: string, field: keyof Production, value: string | boolean) => {
    setProductions(prev => prev.map(p => 
      p.id === id ? { ...p, [field]: value } : p
    ))
  }, [])

  const handleSave = async () => {
    try {
      // Preparar os dados para valida√ß√£o
      const validProductions = productions.filter(p => p.model && p.color && p.quantity);
      const validDowntimes = downtimes.filter(d => d.reason && d.duration);
      
      const productionData = {
        time_slot: selectedTime,
        shift: getShiftFromTime(selectedTime).toLowerCase().replace('¬∫ turno', '') as 'morning' | 'afternoon' | 'night',
        skids_produced: parseInt(skidsProduced || '0'),
        empty_skids: parseInt(emptySkids || '0'),
        created_by_name: 'Sistema', // Ser√° substitu√≠do pelo nome do usu√°rio logado
        paradas: validDowntimes.map(d => ({
           motivo: d.reason,
           inicio: new Date().toISOString(),
           duracao: parseInt(d.duration),
           observacoes: d.description
         })),
         producao: validProductions.map(p => ({
           modelo: p.model,
           cor: p.color.toLowerCase(),
           qtd: parseInt(p.quantity),
           repintura: p.isRepaint
         }))
      };
      
      // Validar dados com Zod
      const validation = validateData(CreateProductionRecordSchema, productionData);
      
      if (!validation.success) {
        // Debug: log dos dados de valida√ß√£o
        console.log('Validation failed:', validation);
        console.log('Validation errors:', validation.errors);
        console.log('Validation message:', validation.message);
        
        const errorMessage = formatValidationErrors(validation.errors);
        toast.error(`Dados inv√°lidos: ${errorMessage}`);
        return;
      }
      
      // Enviar os dados para a API
      if (!token) {
        alert('Voc√™ precisa estar logado para salvar registros');
        return;
      }
      
      const response = await fetch('/api/production-records', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productionData)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        
        // Verificar se √© erro de hor√°rio duplicado
        if (response.status === 409) {
          alert(`‚ö†Ô∏è ${errorData.error}\n\n${errorData.message || 'Este hor√°rio j√° possui um registro de produ√ß√£o.'}`);
          return;
        }
        
        throw new Error(errorData.error || 'Erro ao salvar o registro de produ√ß√£o');
      }
      
      const result = await response.json();
      alert('‚úÖ Registro de produ√ß√£o salvo com sucesso!');
      
      // Disparar evento personalizado para atualizar o dashboard
      window.dispatchEvent(new CustomEvent('productionRecordCreated', {
        detail: result
      }));
      
      onClose();
    } catch (error) {

      alert(`‚ùå Erro ao salvar o registro: ${error.message}`);
    }
  }

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold">Lan√ßamento de Registro</h2>
        <Button variant="ghost" size="icon" onClick={onClose}>
          <ArrowLeft className="h-5 w-5" />
        </Button>
      </div>

      <div className="space-y-6">
        {/* Hor√°rio e Turno */}
        <Card>
          <CardHeader>
            <CardTitle>Hor√°rio e Turno</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="time-slot">Hor√°rio</Label>
              <Select value={selectedTime} onValueChange={setSelectedTime}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione o hor√°rio" />
                </SelectTrigger>
                <SelectContent>
                  {timeSlots.map((slot) => (
                    <SelectItem key={slot} value={slot}>
                      {slot} - {getShiftFromTime(slot)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            {selectedTime && (
              <div className="p-3 bg-blue-50 rounded-lg">
                <p className="text-sm font-medium text-blue-800">
                  Turno: {getShiftFromTime(selectedTime)}
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Skids */}
        <Card>
          <CardHeader>
            <CardTitle>Produ√ß√£o de Skids</CardTitle>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="skids-produced">Skids Produzidos</Label>
              <Input
                id="skids-produced"
                type="number"
                value={skidsProduced}
                onChange={(e) => setSkidsProduced(e.target.value)}
                placeholder="0"
              />
            </div>
            <div>
              <Label htmlFor="empty-skids">Skids Vazios</Label>
              <Input
                id="empty-skids"
                type="number"
                value={emptySkids}
                onChange={(e) => setEmptySkids(e.target.value)}
                placeholder="0"
              />
            </div>
          </CardContent>
        </Card>

        {/* Motivos de Paradas */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Motivos de Paradas
              <Button onClick={addDowntime} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-2" />
                Adicionar Parada
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {downtimes.map((downtime, index) => (
              <div key={downtime.id} className="border rounded-lg p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-medium">Parada {index + 1}</h4>
                  {downtimes.length > 1 && (
                    <Button
                      onClick={() => removeDowntime(downtime.id)}
                      size="sm"
                      variant="ghost"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Motivo da Parada</Label>
                    <Select
                      value={downtime.reason}
                      onValueChange={(value) => updateDowntime(downtime.id, 'reason', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione o motivo" />
                      </SelectTrigger>
                      <SelectContent>
                        {Object.entries(downtimeReasonsByArea).map(([area, reasons]) => (
                          <div key={area}>
                            <div className="px-2 py-1.5 text-sm font-semibold text-gray-900 bg-gray-100">
                              {area}
                            </div>
                            {reasons.map((reason) => (
                              <SelectItem key={reason} value={reason}>
                                {reason}
                              </SelectItem>
                            ))}
                          </div>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Tempo da Parada (minutos)</Label>
                    <Input
                      type="number"
                      value={downtime.duration}
                      onChange={(e) => updateDowntime(downtime.id, 'duration', e.target.value)}
                      placeholder="0"
                    />
                  </div>
                </div>
                <div>
                  <Label>Descri√ß√£o (Opcional)</Label>
                  <Textarea
                    value={downtime.description}
                    onChange={(e) => updateDowntime(downtime.id, 'description', e.target.value)}
                    placeholder="Descreva detalhes da parada..."
                    rows={2}
                  />
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Produ√ß√£o por Modelo e Cor */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Produ√ß√£o por Modelo e Cor
              <Button onClick={addProduction} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-2" />
                Adicionar Produ√ß√£o
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {productions.map((production, index) => (
              <div key={production.id} className="border rounded-lg p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-medium">Produ√ß√£o {index + 1}</h4>
                  {productions.length > 1 && (
                    <Button
                      onClick={() => removeProduction(production.id)}
                      size="sm"
                      variant="ghost"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label>Modelo</Label>
                    <Select
                      value={production.model}
                      onValueChange={(value) => updateProduction(production.id, 'model', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione o modelo" />
                      </SelectTrigger>
                      <SelectContent>
                        {models.map((model) => (
                          <SelectItem key={model} value={model}>
                            {model}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Cor</Label>
                    <Select
                      value={production.color}
                      onValueChange={(value) => updateProduction(production.id, 'color', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione a cor" />
                      </SelectTrigger>
                      <SelectContent>
                        {colors.map((color) => (
                          <SelectItem key={color} value={color}>
                            {color}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Quantidade</Label>
                    <Input
                      type="number"
                      value={production.quantity}
                      onChange={(e) => updateProduction(production.id, 'quantity', e.target.value)}
                      placeholder="0"
                    />
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id={`repaint-${production.id}`}
                    checked={production.isRepaint}
                    onCheckedChange={(checked) => updateProduction(production.id, 'isRepaint', checked as boolean)}
                  />
                  <Label htmlFor={`repaint-${production.id}`}>Repintura</Label>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        <Separator />

        {/* Bot√µes de A√ß√£o */}
        <div className="flex justify-end space-x-4">
          <Button variant="outline" onClick={onClose}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Voltar ao Dashboard
          </Button>
          <Button onClick={handleSave}>
            <Save className="h-4 w-4 mr-2" />
            Salvar Registro
          </Button>
        </div>
      </div>
    </div>
  )
}