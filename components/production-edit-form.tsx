'use client'

import { useState, useCallback, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Separator } from '@/components/ui/separator'
import { Plus, Trash2, ArrowLeft, Save } from 'lucide-react'
import { useAuth } from '@/hooks/use-auth'
import { CreateProductionRecordSchema, ParadaSchema, ProducaoItemSchema } from '@/lib/schemas'
import { validateData, formatValidationErrors } from '@/lib/validation'
import { toast } from 'sonner'
import { useRouter } from 'next/navigation'

interface ProductionEditFormProps {
  recordId: string
  onClose: () => void
}

interface Downtime {
  id: string
  reason: string
  duration: string
  description: string
}

interface Production {
  id: string
  model: string
  color: string
  quantity: string
  isRepaint: boolean
}

interface ProductionRecord {
  id: string
  data?: string
  hora?: string
  time_slot?: string
  skids_produced?: number
  empty_skids?: number
  paradas?: Array<{
    tipo?: string
    motivo?: string
    tempo?: number
    descricao?: string
  }>
  producao?: Array<{
    modelo?: string
    cor?: string
    qtd?: number
    quantidade?: number
    repintura?: boolean
  }>
}

const timeSlots = [
  '00:00 - 01:00', '01:00 - 02:00', '02:00 - 03:00', '03:00 - 04:00', '04:00 - 05:00', '05:00 - 06:00',
  '06:00 - 07:00', '07:00 - 08:00', '08:00 - 09:00', '09:00 - 10:00', '10:00 - 11:00', '11:00 - 12:00',
  '12:00 - 13:00', '13:00 - 14:00', '14:00 - 15:00', '15:00 - 16:00', '16:00 - 17:00', '17:00 - 18:00',
  '18:00 - 19:00', '19:00 - 20:00', '20:00 - 21:00', '21:00 - 22:00', '22:00 - 23:00', '23:00 - 23:59'
]

const getShiftFromTime = (timeSlot: string): 'morning' | 'afternoon' | 'night' => {
  const hour = parseInt(timeSlot.split(':')[0])
  if (hour >= 6 && hour < 14) return 'morning'
  if (hour >= 14 && hour < 22) return 'afternoon'
  return 'night'
}

const getAreaFromReason = (reason: string): string => {
  const areaMap: { [key: string]: string } = {
    'TESTE DE ENGENHARIA': 'Engenharia',
    'LIMITE DE EIXO': 'Engenharia',
    'FALTA DE FERRAMENTAS': 'Gest√£o',
    'FALTA DE OPERADOR NA CARGA': 'Gest√£o',
    'FALTA DE PE√áAS DA PREPARA√á√ÉO': 'Gest√£o',
    'OPERADOR BUSCANDO PE√áA NO ALMOXARIFADO': 'Gest√£o',
    'OPERADOR NA ENFERMARIA': 'Gest√£o',
    'ORGANIZA√á√ÉO GERAL NO SETOR': 'Gest√£o',
    'PARADA NA CABINE': 'Gest√£o',
    'PARADA NA CARGA - ABASTECENDO A LINHA': 'Gest√£o',
    'PARADA NA DESCARGA - DESCARREGANDO PE√áAS': 'Gest√£o',
    'PARADA EXTERNA': 'Gest√£o',
    'REFEI√á√ÉO': 'Gest√£o',
    'REGULAGEM DE M√ÅQUINA': 'Gest√£o',
    'RETRABALHO / LIMPEZA DE PE√áAS': 'Gest√£o',
    'REUNI√ÉO COM A DIRETORIA': 'Gest√£o',
    'REUNI√ÉO': 'Gest√£o',
    'TREINAMENTO': 'Gest√£o',
    'TROCA DE TURNO': 'Gest√£o',
    'AGUARDANDO A PROGRAMA√á√ÉO': 'Log√≠stica',
    'FALHA RFID': 'Log√≠stica',
    'FALTA DE ABASTECIMENTO DE RACK': 'Log√≠stica',
    'FALTA DE EMBALAGEM DA LOG√çSTICA': 'Log√≠stica',
    'FALTA DE EMPILHADOR DA LOG√çSTICA ABASTECENDO PE√áAS': 'Log√≠stica',
    'FALTA DE MAT√âRIA PRIMA (TINTA / VERNIZ)': 'Log√≠stica',
    'FALTA DE PE√áAS DO ALMOXARIFADO (REQUISITADO)': 'Log√≠stica',
    'FALTA DE PE√áAS INJETADAS': 'Log√≠stica',
    'PARADA PROGRAMADA': 'Log√≠stica',
    'AGUARDANDO A MANUTEN√á√ÉO': 'Manuten√ß√£o',
    'CABINE DESBALANCEADA': 'Manuten√ß√£o',
    'CORRENTE QUEBRADA': 'Manuten√ß√£o',
    'FALHA NO ELEVADOR': 'Manuten√ß√£o',
    'FALTA AR COMPRIMIDO': 'Manuten√ß√£o',
    'FALTA DE ENERGIA': 'Manuten√ß√£o',
    'MANGUEIRA ENTUPIDA': 'Manuten√ß√£o',
    'MANGUEIRA VAZANDO': 'Manuten√ß√£o',
    'MANUTEN√á√ÉO CORRETIVA': 'Manuten√ß√£o',
    'SKID TRAVADO': 'Manuten√ß√£o',
    'MANUTEN√á√ÉO EL√âTRICA': 'Manuten√ß√£o',
    'MANUTEN√á√ÉO MEC√ÇNICA': 'Manuten√ß√£o',
    'MANUTEN√á√ÉO PREDIAL': 'Manuten√ß√£o',
    'MANUTEN√á√ÉO PREVENTIVA': 'Manuten√ß√£o',
    'MANUTEN√á√ÉO SERRALHERIA': 'Manuten√ß√£o',
    'PROBLEMA NO ROB√î CAB. FLAMAGEM': 'Manuten√ß√£o',
    'PROBLEMA NO ROB√î CAB. PRIMER': 'Manuten√ß√£o',
    'PROBLEMA NO ROB√î CAB. BASE': 'Manuten√ß√£o',
    'PROBLEMA NO ROB√î CAB. VERNIZ': 'Manuten√ß√£o',
    'PROBLEMA NO MA√áARICO': 'Manuten√ß√£o',
    'PROBLEMA NO MOTOR / CORREIA': 'Manuten√ß√£o',
    'PROBLEMA NO POWER WASH': 'Manuten√ß√£o',
    'AGUARDANDO OPERADOR PARA LIMPEZA': 'Milclean',
    'FALTA DE OPERADOR': 'Produ√ß√£o',
    'FIM DE EXPEDIENTE': 'Produ√ß√£o',
    'LIMPEZA DE M√ÅQUINA': 'Produ√ß√£o',
    'PAUSA': 'Produ√ß√£o',
    'TROCA DE PE√áAS': 'Produ√ß√£o',
    'TROCA DE SETUP': 'Produ√ß√£o',
    'ESPERANDO LIBERA√á√ÉO DA QUALIDADE': 'Qualidade',
    'SETUP DE COR': 'Setup',
    'TROCA DE MODELO': 'Setup',
    'LIMPEZA DA CABINE': 'Pintura',
    'GAP PARA LIMPEZA NA CABINE': 'Pintura',
    'LIMPEZA CONJUNTO ECOBELL': 'Pintura',
    'GAP NA FLAMAGEM': 'Pintura',
    'ACIDENTE / INCIDENTE': 'Seguran√ßa',
    'INSPE√á√ÉO DE SEGURAN√áA': 'Seguran√ßa'
  }
  return areaMap[reason] || 'Outros'
}

const downtimeReasonsByArea = {
  'üß™ Engenharia': [
    'TESTE DE ENGENHARIA',
    'LIMITE DE EIXO'
  ],
  'üë• Gest√£o': [
    'FALTA DE FERRAMENTAS',
    'FALTA DE OPERADOR NA CARGA',
    'FALTA DE PE√áAS DA PREPARA√á√ÉO',
    'OPERADOR BUSCANDO PE√áA NO ALMOXARIFADO',
    'OPERADOR NA ENFERMARIA',
    'ORGANIZA√á√ÉO GERAL NO SETOR',
    'PARADA NA CABINE',
    'PARADA NA CARGA - ABASTECENDO A LINHA',
    'PARADA NA DESCARGA - DESCARREGANDO PE√áAS',
    'PARADA EXTERNA',
    'REFEI√á√ÉO',
    'REGULAGEM DE M√ÅQUINA',
    'RETRABALHO / LIMPEZA DE PE√áAS',
    'REUNI√ÉO COM A DIRETORIA',
    'REUNI√ÉO',
    'TREINAMENTO',
    'TROCA DE TURNO'
  ],
  'üì¶ Log√≠stica': [
    'AGUARDANDO A PROGRAMA√á√ÉO',
    'FALHA RFID',
    'FALTA DE ABASTECIMENTO DE RACK',
    'FALTA DE EMBALAGEM DA LOG√çSTICA',
    'FALTA DE EMPILHADOR DA LOG√çSTICA ABASTECENDO PE√áAS',
    'FALTA DE MAT√âRIA PRIMA (TINTA / VERNIZ)',
    'FALTA DE PE√áAS DO ALMOXARIFADO (REQUISITADO)',
    'FALTA DE PE√áAS INJETADAS',
    'PARADA PROGRAMADA'
  ],
  'üîß Manuten√ß√£o': [
    'AGUARDANDO A MANUTEN√á√ÉO',
    'CABINE DESBALANCEADA',
    'CORRENTE QUEBRADA',
    'FALHA NO ELEVADOR',
    'FALTA AR COMPRIMIDO',
    'FALTA DE ENERGIA',
    'MANGUEIRA ENTUPIDA',
    'MANGUEIRA VAZANDO',
    'MANUTEN√á√ÉO CORRETIVA',
    'SKID TRAVADO',
    'MANUTEN√á√ÉO EL√âTRICA',
    'MANUTEN√á√ÉO MEC√ÇNICA',
    'MANUTEN√á√ÉO PREDIAL',
    'MANUTEN√á√ÉO PREVENTIVA',
    'MANUTEN√á√ÉO SERRALHERIA',
    'PROBLEMA NO ROB√î CAB. FLAMAGEM',
    'PROBLEMA NO ROB√î CAB. PRIMER',
    'PROBLEMA NO ROB√î CAB. BASE',
    'PROBLEMA NO ROB√î CAB. VERNIZ',
    'PROBLEMA NO MA√áARICO',
    'PROBLEMA NO MOTOR / CORREIA',
    'PROBLEMA NO POWER WASH'
  ],
  'üßΩ Milclean': [
    'AGUARDANDO OPERADOR PARA LIMPEZA'
  ],
  'üè≠ Produ√ß√£o': [
    'FALTA DE OPERADOR',
    'FIM DE EXPEDIENTE',
    'LIMPEZA DE M√ÅQUINA',
    'PAUSA',
    'TROCA DE PE√áAS',
    'TROCA DE SETUP'
  ],
  '‚úÖ Qualidade': [
    'ESPERANDO LIBERA√á√ÉO DA QUALIDADE'
  ],
  '‚öôÔ∏è Setup': [
    'SETUP DE COR',
    'TROCA DE MODELO'
  ],
  'üé® Pintura': [
    'LIMPEZA DA CABINE',
    'GAP PARA LIMPEZA NA CABINE',
    'LIMPEZA CONJUNTO ECOBELL',
    'GAP NA FLAMAGEM'
  ],
  'üõ°Ô∏è Seguran√ßa': [
    'ACIDENTE / INCIDENTE',
    'INSPE√á√ÉO DE SEGURAN√áA'
  ]
}

const models = [
  'Polo PA DT',
  'Polo PA TR',
  'Polo Track DT',
  'Polo Track TR',
  'Virtus DT',
  'Virtus TR',
  'Tera DT',
  'Tera Polaina LD',
  'Tera Polaina LE',
  'Grade Virtus',
  'Grade Virtus GTS',
  'Aerof√≥lio',
  'Spoiler',
  'Tera Friso DT',
  'Tera Friso TR'
]

const colors = [
  'Primer P&A',
  'Branco',
  'Prata',
  'Preto',
  'Platinum',
  'Vermelho',
  'Azul Biscay',
  'IceBird',
  'ClearWater',
  'HyperNova'
]

export function ProductionEditForm({ recordId, onClose }: ProductionEditFormProps) {
  const { user, token } = useAuth()
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [loadingRecord, setLoadingRecord] = useState(true)
  
  // Estados do formul√°rio
  const [selectedTime, setSelectedTime] = useState('')
  const [skidsProduced, setSkidsProduced] = useState('')
  const [emptySkids, setEmptySkids] = useState('')
  const [downtimes, setDowntimes] = useState<Downtime[]>([])
  const [productions, setProductions] = useState<Production[]>([])

  // Carregar dados do registro existente
  useEffect(() => {
    const fetchRecord = async () => {
      try {
        const response = await fetch(`/api/production-records/${recordId}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
        if (!response.ok) {
          throw new Error('Erro ao carregar registro')
        }
        
        const record: ProductionRecord = await response.json()
        console.log('Dados do registro carregado:', record)
        
        // Preencher os campos com os dados existentes
        const timeSlot = record.time_slot || record.hora || ''
        console.log('Hor√°rio carregado:', timeSlot)
        setSelectedTime(timeSlot)
        setSkidsProduced((record.skids_produced || 0).toString())
        setEmptySkids((record.empty_skids || 0).toString())
        
        // Converter paradas para o formato do formul√°rio
        const paradas = record.paradas || []
        const formattedDowntimes: Downtime[] = paradas.map((parada: any, index: number) => ({
          id: `downtime-${index}`,
          reason: parada.tipo || parada.motivo || '',
          duration: (parada.tempo || 0).toString(),
          description: parada.descricao || ''
        }))
        setDowntimes(formattedDowntimes.length > 0 ? formattedDowntimes : [{
          id: 'downtime-1',
          reason: '',
          duration: '',
          description: ''
        }])
        
        // Converter produ√ß√£o para o formato do formul√°rio
        const producao = record.producao || []
        const formattedProductions: Production[] = producao.map((prod: any, index: number) => ({
          id: `production-${index}`,
          model: prod.modelo || '',
          color: prod.cor || '',
          quantity: (prod.qtd || prod.quantidade || 0).toString(),
          isRepaint: prod.repintura || false
        }))
        setProductions(formattedProductions.length > 0 ? formattedProductions : [{
          id: 'production-1',
          model: '',
          color: '',
          quantity: '',
          isRepaint: false
        }])
        
      } catch (error) {
        console.error('Erro ao carregar registro:', error)
        toast.error('Erro ao carregar dados do registro')
      } finally {
        setLoadingRecord(false)
      }
    }

    fetchRecord()
  }, [recordId])

  // Fun√ß√µes para gerenciar paradas
  const addDowntime = useCallback(() => {
    const newDowntime: Downtime = {
      id: `downtime-${Date.now()}`,
      reason: '',
      duration: '',
      description: ''
    }
    setDowntimes(prev => [...prev, newDowntime])
  }, [])

  const removeDowntime = useCallback((id: string) => {
    setDowntimes(prev => prev.filter(d => d.id !== id))
  }, [])

  const updateDowntime = useCallback((id: string, field: keyof Downtime, value: string) => {
    setDowntimes(prev => prev.map(d => 
      d.id === id ? { ...d, [field]: value } : d
    ))
  }, [])

  // Fun√ß√µes para gerenciar produ√ß√£o
  const addProduction = useCallback(() => {
    const newProduction: Production = {
      id: `production-${Date.now()}`,
      model: '',
      color: '',
      quantity: '',
      isRepaint: false
    }
    setProductions(prev => [...prev, newProduction])
  }, [])

  const removeProduction = useCallback((id: string) => {
    setProductions(prev => prev.filter(p => p.id !== id))
  }, [])

  const updateProduction = useCallback((id: string, field: keyof Production, value: string | boolean) => {
    setProductions(prev => prev.map(p => 
      p.id === id ? { ...p, [field]: value } : p
    ))
  }, [])

  const handleSave = async () => {
    if (!user) {
      toast.error('Usu√°rio n√£o autenticado')
      return
    }

    setLoading(true)

    try {
      // Validar dados b√°sicos
      if (!selectedTime) {
        toast.error('Selecione um hor√°rio')
        return
      }

      if (!skidsProduced || parseInt(skidsProduced) < 0) {
        toast.error('Informe a quantidade de skids produzidos')
        return
      }

      if (!emptySkids || parseInt(emptySkids) < 0) {
        toast.error('Informe a quantidade de skids vazios')
        return
      }

      // Preparar dados das paradas
      const paradasData = (downtimes || [])
        .filter(d => d && d.reason && d.duration)
        .map(d => ({
          motivo: 'other', // Usando enum v√°lido do schema
          inicio: new Date().toISOString(),
          duracao: parseInt(d.duration) || 0,
          observacoes: `${d.reason} - ${d.description || ''}`.trim()
        }))

      // Preparar dados da produ√ß√£o
      const producaoData = (productions || [])
        .filter(p => p && p.model && p.color && p.quantity)
        .map(p => ({
          modelo: p.model,
          cor: 'other', // Usando enum v√°lido do schema
          qtd: parseInt(p.quantity) || 0,
          repintura: p.isRepaint,
          observacoes: `Cor original: ${p.color}`
        }))

      if (producaoData.length === 0) {
        toast.error('Adicione pelo menos um item de produ√ß√£o')
        return
      }

      // Preparar dados para envio (formato esperado pela API)
      const recordData = {
        selectedTime: selectedTime,
        shift: getShiftFromTime(selectedTime),
        skidsProduced: parseInt(skidsProduced) || 0,
        emptySkids: parseInt(emptySkids) || 0,
        targetDate: new Date().toISOString().split('T')[0], // Data atual no formato YYYY-MM-DD
        downtimes: (downtimes || []).filter(d => d && d.reason && d.duration).map(d => ({
          reason: d.reason,
          duration: parseInt(d.duration) || 0,
          description: d.description || ''
        })),
        productions: (productions || []).filter(p => p && p.model && p.color && p.quantity).map(p => ({
          model: p.model,
          color: p.color,
          quantity: parseInt(p.quantity) || 0,
          isRepaint: p.isRepaint || false
        }))
      }

      console.log('Dados para envio:', recordData)
      console.log('Shift calculado:', getShiftFromTime(selectedTime))

      // Valida√ß√£o b√°sica antes do envio
      if (!selectedTime) {
        toast.error('Selecione um hor√°rio')
        return
      }
      
      if (recordData.productions.length === 0) {
        toast.error('Adicione pelo menos um item de produ√ß√£o')
        return
      }

      // Enviar para API
      const response = await fetch(`/api/production-records/${recordId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(recordData)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Erro ao atualizar registro')
      }

      toast.success('Registro atualizado com sucesso!')
      onClose()
      router.push('/dashboard/production')
      
    } catch (error) {
      console.error('Erro ao atualizar registro:', error)
      toast.error(error instanceof Error ? error.message : 'Erro ao atualizar registro')
    } finally {
      setLoading(false)
    }
  }

  if (loadingRecord) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando dados do registro...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Editar Registro de Produ√ß√£o</h1>
          <p className="text-gray-600">Edite as informa√ß√µes do registro de produ√ß√£o</p>
        </div>

        {/* Sele√ß√£o de Hor√°rio */}
        <Card>
          <CardHeader>
            <CardTitle>Hor√°rio de Produ√ß√£o</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="time-slot">Hor√°rio</Label>
                <Select value={selectedTime} onValueChange={setSelectedTime}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione o hor√°rio" />
                  </SelectTrigger>
                  <SelectContent>
                    {timeSlots.map((slot) => (
                      <SelectItem key={slot} value={slot}>
                        {slot} - {getShiftFromTime(slot)}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Produ√ß√£o de Skids */}
        <Card>
          <CardHeader>
            <CardTitle>Produ√ß√£o de Skids</CardTitle>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="skids-produced">Skids Produzidos</Label>
              <Input
                id="skids-produced"
                type="number"
                value={skidsProduced}
                onChange={(e) => setSkidsProduced(e.target.value)}
                placeholder="0"
              />
            </div>
            <div>
              <Label htmlFor="empty-skids">Skids Vazios</Label>
              <Input
                id="empty-skids"
                type="number"
                value={emptySkids}
                onChange={(e) => setEmptySkids(e.target.value)}
                placeholder="0"
              />
            </div>
          </CardContent>
        </Card>

        {/* Motivos de Paradas */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Motivos de Paradas
              <Button onClick={addDowntime} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-2" />
                Adicionar Parada
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {downtimes.map((downtime, index) => (
              <div key={downtime.id} className="border rounded-lg p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-medium">Parada {index + 1}</h4>
                  {downtimes.length > 1 && (
                    <Button
                      onClick={() => removeDowntime(downtime.id)}
                      size="sm"
                      variant="ghost"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Motivo da Parada</Label>
                    <Select
                      value={downtime.reason}
                      onValueChange={(value) => updateDowntime(downtime.id, 'reason', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione o motivo" />
                      </SelectTrigger>
                      <SelectContent>
                        {Object.entries(downtimeReasonsByArea).map(([area, reasons]) => (
                          <div key={area}>
                            <div className="px-2 py-1.5 text-sm font-semibold text-gray-900 bg-gray-100">
                              {area}
                            </div>
                            {reasons.map((reason) => (
                              <SelectItem key={reason} value={reason}>
                                {reason}
                              </SelectItem>
                            ))}
                          </div>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Tempo da Parada (minutos)</Label>
                    <Input
                      type="number"
                      value={downtime.duration}
                      onChange={(e) => updateDowntime(downtime.id, 'duration', e.target.value)}
                      placeholder="0"
                    />
                  </div>
                </div>
                <div>
                  <Label>Descri√ß√£o (Opcional)</Label>
                  <Textarea
                    value={downtime.description}
                    onChange={(e) => updateDowntime(downtime.id, 'description', e.target.value)}
                    placeholder="Descreva detalhes da parada..."
                    rows={2}
                  />
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Produ√ß√£o por Modelo e Cor */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Produ√ß√£o por Modelo e Cor
              <Button onClick={addProduction} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-2" />
                Adicionar Produ√ß√£o
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {productions.map((production, index) => (
              <div key={production.id} className="border rounded-lg p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-medium">Produ√ß√£o {index + 1}</h4>
                  {productions.length > 1 && (
                    <Button
                      onClick={() => removeProduction(production.id)}
                      size="sm"
                      variant="ghost"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label>Modelo</Label>
                    <Select
                      value={production.model}
                      onValueChange={(value) => updateProduction(production.id, 'model', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione o modelo" />
                      </SelectTrigger>
                      <SelectContent>
                        {models.map((model) => (
                          <SelectItem key={model} value={model}>
                            {model}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Cor</Label>
                    <Select
                      value={production.color}
                      onValueChange={(value) => updateProduction(production.id, 'color', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione a cor" />
                      </SelectTrigger>
                      <SelectContent>
                        {colors.map((color) => (
                          <SelectItem key={color} value={color}>
                            {color}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Quantidade</Label>
                    <Input
                      type="number"
                      value={production.quantity}
                      onChange={(e) => updateProduction(production.id, 'quantity', e.target.value)}
                      placeholder="0"
                    />
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id={`repaint-${production.id}`}
                    checked={production.isRepaint}
                    onCheckedChange={(checked) => updateProduction(production.id, 'isRepaint', checked as boolean)}
                  />
                  <Label htmlFor={`repaint-${production.id}`}>Repintura</Label>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        <Separator />

        {/* Bot√µes de A√ß√£o */}
        <div className="flex justify-end space-x-4">
          <Button variant="outline" onClick={onClose}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Cancelar
          </Button>
          <Button onClick={handleSave} disabled={loading}>
            <Save className="h-4 w-4 mr-2" />
            {loading ? 'Salvando...' : 'Atualizar Registro'}
          </Button>
        </div>
      </div>
    </div>
  )
}